name: Elevator-Go CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  # Linting job - runs first for fast feedback
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.3.0
        args: --timeout=5m

  # Unit tests job - runs core unit tests
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Run unit tests with coverage
      run: |
        go test -v -short -coverprofile=coverage.out $(go list ./internal/... ./cmd/...)
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push'
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  # Race condition tests - separate job for race detection
  race_tests:
    name: Race Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Run race tests
      run: make test/race

  # Integration/Acceptance tests - runs acceptance tests
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [lint] # Only run if linting passes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Run acceptance tests
      run: make test/acceptance
        
    - name: Run integration tests with testcontainers
      run: make test/integration

  # Build job - builds Docker image in parallel
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Build binary
      run: make build
        
    - name: Build Docker image
      run: make docker/build
        
    - name: Cleanup Docker resources
      if: always()
      run: |
        docker rmi elevator-service:latest || true

  # Benchmark tests - optional, runs on schedule or manual trigger
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Run benchmarks
      run: make test/benchmarks

  # Final check job - ensures all critical jobs pass
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, unit_tests, race_tests, integration_tests, build]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "Lint job failed"
          exit 1
        fi
        if [[ "${{ needs.unit_tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.race_tests.result }}" != "success" ]]; then
          echo "Race tests failed"
          exit 1
        fi
        if [[ "${{ needs.integration_tests.result }}" != "success" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build failed"
          exit 1
        fi
        echo "All checks passed!"
